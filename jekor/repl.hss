import System.Process

:t shell

:t CreateProcess

:info CreateProcess

:info createProcess

:t createProcess . shell

createProcess $ shell "true"

createProcess $ shell "sh redo.do"

:step

:step main

:load *redo

_result

:print _result

-- unevaluated _t1, need to force evaluation

:force _result

:break 5

:continue

import System.Environment

:info System.Environment.getArgs

:def search return . (":! hoogle " ++)

:search getArgs

:script /home/abergman/.ghc/ghci.conf

:{
let ghciEscapeShellArg arg = "'" ++ concatMap (\c -> if c == '\'' then "'\"'\"'" else [c]) arg ++ "'"
:}
:def! search return . (":! hoogle --color " ++) . ghciEscapeShellArg
:def! doc    return . (":! hoogle --info " ++) . ghciEscapeShellArg

:search getArgs

:doc getArgs

:search rename

:doc waitForProcess

:info ExitCode

:doc ExitCode

import System.Exit

:search remove

:search basename

System.FilePath.replaceBaseName "hello.o" "default"

System.FilePath.replaceBaseName "redo" "default"

:search extension

-- order of operations: concat vs function application
System.FilePath.replaceBaseName "hello.o" "default" ++ ".do"

:info (++)

:info ($)

:search exist

-- head is unsafe when given empty list
:! ./redo missing

head []

./redo README.txt

words "the quick brown fox"

unwords ["the",">","brown","fox"]

Data.Maybe.listToMaybe [1..10]

Data.Maybe.listToMaybe []

import Data.Trace

:browse Data.Trace

:browse Data.List

import System.Process

:info CreateProcess

getEnvironment

:type getEnvironment

import System.Directory

:browse System.Directory

getDirectoryContents ".redo/redo/"

:t all

all id [True, True, False]

all id []

cabal install PureMD7

cabal repl

import Data.Digest.Pure.MD5

:t md5

import Control.Monad
 
md5 `liftM` Data.ByteString.Lazy.readFile "redo.hs"


