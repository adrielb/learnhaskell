import System.Process

:t shell

:t CreateProcess

:info CreateProcess

:info createProcess

:t createProcess . shell

createProcess $ shell "true"

createProcess $ shell "sh redo.do"

:step

:step main

:load *redo

_result

:print _result

-- unevaluated _t1, need to force evaluation

:force _result

:break 5

:continue

import System.Environment

:info System.Environment.getArgs

:def search return . (":! hoogle " ++)

:search getArgs

:script /home/abergman/.ghc/ghci.conf

:{
let ghciEscapeShellArg arg = "'" ++ concatMap (\c -> if c == '\'' then "'\"'\"'" else [c]) arg ++ "'"
:}
:def! search return . (":! hoogle --color " ++) . ghciEscapeShellArg
:def! doc    return . (":! hoogle --info " ++) . ghciEscapeShellArg

:search getArgs

:doc getArgs

:search rename

:doc waitForProcess

:info ExitCode

:doc ExitCode

import System.Exit

:search remove
